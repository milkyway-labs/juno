// Since: cosmos-sdk 0.43
syntax = "proto3";
package cosmos.authz.v1beta1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";

option go_package = "github.com/forbole/juno/v5/cosmos-sdk/x/authz";
option (gogoproto.goproto_getters_all) = false;

// MsgExec attempts to execute the provided messages using
// authorizations granted to the grantee. Each message should have only
// one signer corresponding to the granter of the authorization.
message MsgExec {
  option (cosmos.msg.v1.signer) = "grantee";
  option (amino.name) = "cosmos-sdk/MsgExec";

  string grantee = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // Execute Msg.
  // The x/authz will try to find a grant matching (msg.signers[0], grantee,
  // MsgTypeURL(msg)) triple and validate it.
  repeated google.protobuf.Any msgs = 2
      [ (cosmos_proto.accepts_interface) = "cosmos.base.v1beta1.Msg" ];
}

// MsgExecResponse defines the Msg/MsgExecResponse response type.
message MsgExecResponse { repeated bytes results = 1; }
